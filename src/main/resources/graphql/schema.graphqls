# Scalar Types
scalar DateTime
scalar BigDecimal

type Customer {
	 customerId: ID!
	 firstName: String
	 lastName: String
}

type Account {
	accountId: ID!
	type: AccountType
	balance: BigDecimal
}

type Transaction {
   transactionId: ID!
   accountId: Int
   customerId: Int
   type: TransactionType
   amount: BigDecimal
   balance: BigDecimal
   description: String
   transactionDateTime: String
}

type Query {
	 customers: [Customer]
	 accounts: [Account]
	 transactions(input: TransactionSearchInput): [Transaction]
}

type Mutation {
 	createCustomer(input: CreateCustomerInput): Customer
 	createAccount(input: CreateAccountInput): Account
}

input TransactionSearchInput {
   accountId: Int
   customerId: Int
   page: Int = 0
   pageSize: Int = 20
}

input CreateCustomerInput {
  firstName: String!
  lastName: String!
}

enum AccountType {
   	SAVINGS,
   	CURRENT
}

enum TransactionType{
 	DEPOSIT,
 	WITHDRAW
}

input CreateAccountInput {
  type: AccountType
}

# GraphQL Schema
schema {
	# GraphQL query to fetch data
	query: Query
	# GraphQL query to update data
	mutation: Mutation
}